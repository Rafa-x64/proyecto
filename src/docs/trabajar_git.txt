üß© Estructura profesional de trabajo colaborativo
1. Ramas temporales por funcionalidad
Cada colaborador debe trabajar en una rama temporal y descriptiva, basada en main, por ejemplo:

bash
git checkout main
git pull origin main
git checkout -b feat/login-form
Prefijo feat/ para nuevas funcionalidades

Prefijo fix/ para correcciones

Prefijo refactor/ para reestructuraciones

2. Mantener la rama main actualizada
Antes de crear una rama o hacer un merge, siempre sincronizar con main:

bash
git checkout main
git pull origin main
Para actualizar tu rama temporal con los √∫ltimos cambios de main:

bash
git checkout feat/login-form
git fetch origin
git rebase origin/main
‚ö†Ô∏è Usa rebase para mantener un historial limpio. Si hay conflictos, resu√©lvelos y contin√∫a con:

bash
git add .
git rebase --continue
3. Evitar sobrescribir trabajo ajeno
Nunca hagas push --force a ramas compartidas. Solo se permite en ramas personales y con consentimiento.

Para subir tu rama:

bash
git push origin feat/login-form
üîÅ Flujo de Pull Request (PR)
4. C√≥mo deben trabajar tus compa√±eros
Al terminar una funcionalidad, deben:

Crear el PR desde su rama hacia main

Agregar descripci√≥n clara: qu√© se hizo, por qu√©, c√≥mo probarlo

Solicitar revisi√≥n: asignar revisores

No hacer merge directo: esperar aprobaci√≥n

5. C√≥mo debes revisar y aceptar PRs
a. Revisi√≥n t√©cnica
Verifica que la rama est√© actualizada con main

Revisa el c√≥digo: estilo, seguridad, l√≥gica

Ejecuta pruebas locales si aplica

b. Comandos para revisar localmente
bash
git fetch origin pull/ID/head:pr-branch
git checkout pr-branch
Reemplaza ID con el n√∫mero del PR

c. Merge profesional
Una vez aprobado, haz merge tipo squash para mantener el historial limpio:

bash
git checkout main
git pull origin main
git merge --squash feat/login-form
git commit -m "feat: login form implementation"
git push origin main
Alternativamente, puedes hacer el squash desde la interfaz de GitHub.

üõ°Ô∏è Reglas de protecci√≥n
Protege la rama main desde GitHub:

Requiere PR para hacer cambios

Requiere revisi√≥n de al menos un compa√±ero

Proh√≠be force push

Requiere que los tests pasen (si usas CI/CD)

üì¶ Comandos clave resumen
Acci√≥n	Comando
Crear rama temporal	git checkout -b feat/nombre
Actualizar rama con main	git fetch origin && git rebase origin/main
Subir cambios	git push origin feat/nombre
Revisar PR localmente	git fetch origin pull/ID/head:pr-branch
Hacer merge limpio	git merge --squash feat/nombre
¬øQuieres que te genere una plantilla de PR profesional o una configuraci√≥n de protecci√≥n de ramas en GitHub? Tambi√©n puedo ayudarte a definir roles de contribuci√≥n y convenciones para tu equipo.