Propósito del Proyecto

    Este proyecto está diseñado como una aplicación web modular basada en el patrón MVC (Modelo-Vista-Controlador), orientada a facilitar el desarrollo escalable, seguro y mantenible de interfaces dinámicas en PHP. Su estructura permite:

        •Separación clara de responsabilidades entre lógica de negocio, presentación y control de flujo.

        •Carga dinámica de vistas mediante URLs amigables gestionadas por .htaccess, lo que mejora la navegación y la extensibilidad.

        •Gestión centralizada de constantes y configuración a través de los módulos APP y SERVER, permitiendo reutilización y seguridad.

        •Integración de componentes reutilizables (layouts, helpers, assets) para acelerar el desarrollo frontend sin duplicar código.

        •Seguridad incorporada mediante encriptación de datos sensibles, hashing de contraseñas y validación de sesiones.

        •Escalabilidad progresiva, permitiendo agregar nuevas vistas, modelos y controladores sin alterar la estructura base.

    El sistema está pensado para servir como plantilla base de proyectos PHP, adaptable a múltiples contextos: paneles administrativos, sitios informativos, sistemas internos o prototipos funcionales.

Descripción funcional

    Este proyecto es una aplicación web estructurada bajo el patrón MVC (Modelo-Vista-Controlador), diseñada para gestionar dinámicamente vistas PHP mediante rutas amigables. Su arquitectura modular permite una separación clara entre lógica de negocio, presentación y control de flujo, facilitando el mantenimiento, la escalabilidad y la reutilización de componentes tanto en frontend como backend.

Público objetivo

    Desarrolladores web que trabajen en entornos PHP y requieran una base estructurada para construir aplicaciones dinámicas, paneles administrativos, sistemas internos o prototipos funcionales. El proyecto está orientado a equipos técnicos que valoran la organización, la seguridad y la extensibilidad del código.

Tecnologías principales

    •PHP (con orientación a objetos y modularidad)

    •Composer (gestión de dependencias)

    •Bootstrap 5 (estilización y componentes frontend)

    •AJAX (peticiones de datos asíncronas)

    •JavaScript (interactividad y automatización)

    •Apache + .htaccess (reescritura de URLs y configuración del servidor)

    •HTML/CSS (estructura y presentación de vistas)

    •PDO (acceso seguro a bases de datos)

    •OpenSSL (encriptación de datos sensibles)

    •GIT/Github (control de versiones)

Estructura del proyecto

    La siguiente estructura organiza el proyecto bajo el patrón MVC, separando claramente la lógica de negocio, la presentación y el control de flujo. Cada módulo cumple una función específica y está diseñado para facilitar la escalabilidad, la reutilización y el mantenimiento.

        ->leer estructura_proyecto.txt

Archivos que no deben modificarse directamente

    •.htaccess

    •index.php

    •composer.json / composer.lock

    •config/SERVER/

    •model/mainModel/

Carpetas pensadas para extensión o personalización

    •view/html/ → Agregar nuevas vistas

    •assets/components/ → Crear nuevos fragmentos HTML reutilizables

    •helpers/js/ y helpers/php/ → Añadir funciones compartidas

    •docs/ → Documentar nuevas funcionalidades o decisiones técnicas

    •model/ → Crear nuevos modelos que extiendan mainModel

    •controller/ → Agregar nuevos controladores si se amplía la lógica

Instalación y configuración

    Esta sección describe los requisitos técnicos, los pasos para instalar el proyecto en un entorno local, y la configuración inicial necesaria para su correcto funcionamiento.

        Requisitos del sistema

            •PHP 8.0 o superior Recomendado para compatibilidad con tipado estricto, excepciones modernas y funciones criptográficas.

            •Servidor web Apache Incluido en XAMPP, necesario para interpretar .htaccess y servir archivos PHP.

            •Composer Gestor de dependencias para instalar Bootstrap y otras librerías PHP.

Pasos para clonar e instalar el proyecto

    •Clonar el repositorio en la carpeta htdocs de XAMPP utilizando Git.

    •Acceder al directorio del proyecto desde la terminal o consola.

    •Ejecutar el comando composer install para instalar las dependencias definidas en composer.json...

    •Verificar que la carpeta vendor esté presente y contenga Bootstrap y otras librerías necesarias.

Configuración inicial

    •El proyecto no utiliza variables de entorno .env, pero centraliza su configuración en dos módulos clave:

    •config/SERVER Contiene constantes sensibles como credenciales de base de datos, claves de encriptación, algoritmo de cifrado y cadena de conexión. Este archivo no debe modificarse sin autorización.

    •config/APP Contiene constantes generales como el nombre del sistema, la ruta base y configuraciones reutilizables en frontend y backend.

Cómo iniciar el proyecto localmente

    •Iniciar Apache desde el panel de control de XAMPP.

    •Acceder al proyecto desde el navegador mediante la URL http://localhost/proyecto/

    •El archivo index.php actúa como punto de entrada, cargando dinámicamente la vista correspondiente según el parámetro page en la URL.

Flujo de ejecución

    Esta sección describe cómo se carga una vista dentro del sistema, cómo se estructuran las rutas mediante .htaccess, y cómo se integran los layouts y componentes en la plantilla principal.

    Carga de una vista

        •El archivo index.php actúa como punto de entrada de la aplicación. Desde allí se instancia el controlador principal.

        •El controlador vista_controller.php obtiene el parámetro page desde la URL y lo utiliza para determinar qué vista debe cargarse.

        •El modelo vista_model.php valida si la vista solicitada existe en el sistema. Si no existe, retorna una vista de error (404).

        •Una vez determinada la vista, se carga la plantilla principal ubicada en view/plantilla, que incluye los elementos repetitivos del frontend.

        •La plantilla integra el contenido dinámico de la vista junto con los layouts definidos en assets/layouts (header, footer, scripts, etc.).

    Estructura de rutas

        •Las rutas son gestionadas por el archivo .htaccess, que reescribe cualquier URL en la forma index.php?page=nombre.

        •Esto permite acceder a vistas mediante URLs limpias como http://localhost/proyecto/inicio, sin exponer la estructura interna del sistema.

        •El parámetro page se interpreta como el nombre de la vista solicitada, y se utiliza para cargar dinámicamente el archivo correspondiente.

    Integración de layouts y componentes

        •Los layouts se encuentran en assets/layouts y contienen elementos comunes como header.php, footer.php, links.php y scripts.php.

        •Estos archivos son incluidos automáticamente por la plantilla principal, lo que garantiza consistencia visual y funcional en todas las vistas.

        •Los componentes reutilizables (ubicados en assets/components) pueden ser integrados dentro de cualquier vista o layout para modularizar la interfaz.

        •Esta estructura permite mantener el código organizado, evitar duplicación y facilitar la personalización del frontend.

Convenciones de desarrollo

    Esta sección establece las reglas y patrones que deben seguirse para mantener la coherencia, legibilidad y escalabilidad del código en todo el proyecto.

    Nombres de archivos y funciones

        •Los archivos PHP deben nombrarse en minúsculas y con guiones bajos para separar palabras (ejemplo: vista_controller.php).

        •Las funciones deben utilizar nombres descriptivos en estilo camelCase, reflejando claramente su propósito (ejemplo: cargarVista, desencriptarDato).

        •Los modelos y controladores deben seguir el patrón Nombre_tipo.php, donde tipo puede ser model o controller.

        •Las vistas deben nombrarse como nombre-view.php, donde nombre representa la sección o página correspondiente.

    Estructura de controladores y modelos

        •Cada controlador debe extender de un modelo si requiere acceso a métodos de negocio o utilitarios.

        •El controlador principal (vista_controller.php) se encarga de interpretar la URL y cargar la vista correspondiente.

        •El modelo principal (mainModel) contiene métodos comunes como conexión a base de datos, encriptación, validación y hashing.

        •Los modelos específicos deben extender de mainModel para heredar funcionalidad base y mantener consistencia.

    Uso de helpers y assets

        •Los helpers se dividen en js y php, y deben contener funciones reutilizables que no dependan de una vista específica.

        •Los assets se organizan por tipo: bootstrap, components, icons, images, layouts. Cada carpeta debe contener únicamente su tipo de recurso.

        •Los layouts deben incluirse mediante la plantilla principal y no directamente en las vistas.

        •Los componentes HTML deben diseñarse para ser independientes y reutilizables en múltiples vistas o layouts.

    Reglas para agregar nuevos componentes o vistas

        •Toda nueva vista debe agregarse en view/html y su nombre debe incluir el sufijo -view.php.

        •El nombre de la vista debe añadirse al arreglo paginas_existentes en vista_model.php para que sea reconocida por el sistema.

        •Los componentes nuevos deben ubicarse en assets/components y seguir una estructura modular.

        •Si se requiere lógica adicional para una vista, puede crearse un nuevo controlador que extienda de vista_controller o mainModel según el caso.

        •Los estilos y scripts específicos de una vista deben colocarse en view/css y view/js respectivamente, y enlazarse desde scripts.php o links.php.